package io.github.markmanflame55.pvpserverplugin.events;

import io.github.markmanflame55.pvpserverplugin.PvPServerPlugin;
import org.bukkit.NamespacedKey;
import org.bukkit.Server;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.persistence.PersistentDataType;
import org.bukkit.scheduler.BukkitRunnable;

public class InvulnerabilityManager implements Listener {

    static PvPServerPlugin plugin = PvPServerPlugin.getPlugin();
    // Para asegurarme de que siempre es el mismo contador, tengo aqui la KEY facilmente accesible desde cualquier lado.
    public static final NamespacedKey INVULNERABILITY_KEY = new NamespacedKey(plugin, "invulnerability_seconds_left");

    public static void startChecking() {
        Server server = plugin.getServer();
        // Cada segundo del servidor, obtener los segundos restantes del jugador y restarle 1 :P
        new BukkitRunnable() {
            @Override
            public void run() {
                for (Player player : server.getOnlinePlayers()) {
                    if (player.getPersistentDataContainer().has(INVULNERABILITY_KEY)) {
                        int secondsLeft = player.getPersistentDataContainer().get(INVULNERABILITY_KEY, PersistentDataType.INTEGER);
                        if (secondsLeft > 0) player.getPersistentDataContainer().set(INVULNERABILITY_KEY, PersistentDataType.INTEGER, ++secondsLeft);
                    }
                }
            }
        }.runTaskTimer(plugin, 20, 20);
    }



    // Cada vez que el jugador reciba algo de daÃ±o, revisa su contador, mientras sea >0 lo cancela.
    @EventHandler
    public void onPlayerDamage(EntityDamageEvent e) {
        if (e.getEntity() instanceof Player player) {
            if (player.getPersistentDataContainer().has(INVULNERABILITY_KEY)) {
                int secondsLeft = player.getPersistentDataContainer().get(INVULNERABILITY_KEY, PersistentDataType.INTEGER);
                if (secondsLeft > 0) {
                    e.setCancelled(true);
                }
            }
        }
    }

}
